<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml
 sun-position - Implementation of an algorithm to calculate the sun position
-->

<project name="sun-position" default="final" basedir=".">

    <description>
     sun-position - Implementation of an algorithm to calculate the sun position
    </description>

	<property file="build.properties"/>
	<property file="build.properties.defaults"/>

	<path id="subant.path">
	</path>

	<fileset id="lib.fileset" dir="${lib.dir}">
		<include name="*.jar" />
	</fileset>

	<path id="build.path">
		<fileset refid="lib.fileset" />
	</path>

	<path id="test.path">
		<path refid="build.path"/>
		<pathelement location="${build.classes.dir}"/>
		<pathelement location="${lib.junit.jar}"/>
	</path>

	<target name="all" depends="final, test, docs, check"
            description="Build, pack, test, document and check the application"/>

	<target name="clean" depends="" description="Clean up the environment">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${final.dir}"/>
	</target>

	<target name="init" depends="" description="Initialise the environment">
		<tstamp/>
		<mkdir dir="${build.dir}"/>
	</target>

	<target name="build" depends="init" description="Compile the java sources">
		<mkdir dir="${build.classes.dir}"/>

		<javac srcdir="${java.dir}" destdir="${build.classes.dir}" classpathref="build.path"
               source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}"
               nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}"/>
		<!-- copy other resources -->
		<copy todir="${build.classes.dir}">
		    <fileset dir="${resources.dir}"/>
    </copy>
		
	</target>

	<target name="dist" depends="build" description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
		<mkdir dir="${dist.dir}" />

		<jar destfile="${dist.jar.file}" basedir="${build.classes.dir}" manifest="${conf.manifest.file}" compress="${jar.compress}" index="${jar.index}" update="${jar.update}" filesetmanifest="merge">
		</jar>
	</target>

	<target name="final" depends="dist" description="Make the final distribution group of files">
		<mkdir dir="${final.dir}"/>

		<copy todir="${final.dir}" verbose="true" overwrite="true">
			<fileset dir="${dist.dir}"/>
			<fileset dir="${lib.dir}">
				<exclude name="junit*" />
				<exclude name="checkstyle*" />
			</fileset>
		</copy>

	</target>

	<target name="test" depends="final"
            description="Run the unit tests (using JUnit or other specific tests)">
		<mkdir dir="${build.testclass.dir}"/>
		<mkdir dir="${build.jureport.dir}"/>
		<javac srcdir="test" destdir="${build.testclass.dir}" classpathref="test.path"/>

		<junit printsummary="${junit.summary}" showoutput="${junit.output}">
			<classpath>
				<path refid="test.path"/>
				<pathelement location="${build.testclass.dir}"/>
			</classpath>
			<batchtest todir="${build.jureport.dir}" haltonfailure="${junit.halt}">
				<fileset dir="${build.testclass.dir}" includes="**/*Test.class"/>
			</batchtest>
			<formatter type="xml"/>
		</junit>

		<junitreport todir="${build.jureport.dir}">
			<fileset dir="${build.jureport.dir}" includes="TEST-*.xml"/>
			<report todir="${build.jureport.dir}"/>
		</junitreport>
	</target>

	<target name="docs" depends="init"
            description="Generate the API javadoc (and other documentation files)">
		<mkdir dir="${build.javadoc.dir}"/>

		<javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}"
                 source="${javac.source}" packagenames="${javadoc.packages}"
                 access="${javadoc.access}" failonerror="${javadoc.fail}">
			<classpath refid="build.path"/>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
		</javadoc>
	</target>

	<target name="check" depends="build"
            description="Check the sources for style violations (and report them)">
		<mkdir dir="${build.csreport.dir}"/>
		<taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}"/>

		<checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
			<classpath>
				<path refid="build.path"/>
				<pathelement location="${build.classes.dir}"/>
			</classpath>
			<fileset dir="${java.dir}" includes="**/*.java"/>
			<formatter type="xml" tofile="${build.csreport.dir}/csreport.xml"/>
		</checkstyle>

		<xslt basedir="${build.csreport.dir}" includes="*.xml"
              destdir="${build.csreport.dir}" style="${checkstyle.style}">
			<param name="output.dir" expression="${build.csreport.dir}"/>
			<param name="source.dir" expression="${basedir}/${java.dir}/"/>
		</xslt>
	</target>
</project>
